{
  "name": "coc-deno",
  "version": "3.12.1",
  "description": "Deno extension for coc.nvim, forked from vscode_deno",
  "author": "Heyward Fann <fannheyward@gmail.com>",
  "license": "MIT",
  "main": "./lib/index.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/fannheyward/coc-deno.git"
  },
  "keywords": [
    "coc.nvim",
    "deno"
  ],
  "engines": {
    "coc": "^0.0.80"
  },
  "scripts": {
    "prepare": "node esbuild.js",
    "build": "node esbuild.js",
    "watch": "node esbuild.js --watch",
    "fmt": "deno fmt src README.md",
    "lint": "deno lint --unstable src"
  },
  "devDependencies": {
    "@types/node": "20.2.5",
    "@types/semver": "^7.3.4",
    "coc.nvim": "^0.0.83-next.9",
    "esbuild": "^0.17.5",
    "semver": "^7.3.5",
    "typescript": "^5.0.4"
  },
  "activationEvents": [
    "onCommand:deno.initializeWorkspace",
    "onLanguage:typescript",
    "onLanguage:typescriptreact",
    "onLanguage:javascript",
    "onLanguage:javascriptreact"
  ],
  "contributes": {
    "commands": [
      {
        "command": "deno.cache",
        "title": "Cache Dependencies",
        "category": "Deno",
        "description": "Cache the active workspace document and its dependencies."
      },
      {
        "command": "deno.status",
        "title": "Language Server Status",
        "category": "Deno",
        "description": "Provide a status document of the language server."
      },
      {
        "command": "deno.restart",
        "title": "Restart Language Server",
        "category": "Deno",
        "description": "Restart the Deno language server"
      },
      {
        "command": "deno.task",
        "title": "List/Run Deno task",
        "category": "Deno",
        "description": "List/Run Deno tasks"
      },
      {
        "command": "deno.reloadImportRegistries",
        "title": "Reload Import Registries Cache",
        "category": "Deno",
        "description": "Reload any cached import registry responses."
      },
      {
        "command": "deno.initializeWorkspace",
        "title": "Initialize Workspace Configuration",
        "category": "Deno",
        "description": "Initialize the workspace configuration for Deno."
      }
    ],
    "configuration": {
      "type": "object",
      "title": "coc-deno configuration",
      "properties": {
        "deno.enable": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Controls if the Deno Language Server is enabled. When enabled, the extension will disable the built-in VSCode JavaScript and TypeScript language services, and will use the Deno Language Server (`deno lsp`) instead.\n\n**Not recommended to be enabled globally.**",
          "scope": "window",
          "examples": [
            true,
            false
          ]
        },
        "deno.trace.server": {
          "type": "string",
          "scope": "window",
          "enum": [
            "off",
            "messages",
            "verbose"
          ],
          "enumDescriptions": [
            "No traces",
            "Error only",
            "Full log"
          ],
          "default": "off",
          "description": "Trace requests to Deno"
        },
        "deno.path": {
          "type": "string",
          "default": null,
          "markdownDescription": "A path to the `deno` CLI executable. By default, the extension looks for `deno` in the `PATH`, but if set, will use the path specified instead.",
          "scope": "window",
          "examples": [
            "/usr/bin/deno",
            "C:\\Program Files\\deno\\deno.exe"
          ]
        },
        "deno.cache": {
          "type": "string",
          "default": null,
          "markdownDescription": "A path to the cache directory for Deno. By default, the operating system's cache path plus `deno` is used, or the `DENO_DIR` environment variable, but if set, this path will be used instead.",
          "scope": "window"
        },
        "deno.codeLens.implementations": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Enables or disables the display of code lens information for implementations of items in the code.",
          "scope": "window",
          "examples": [
            true,
            false
          ]
        },
        "deno.codeLens.references": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Enables or disables the display of code lens information for references of items in the code.",
          "scope": "window",
          "examples": [
            true,
            false
          ]
        },
        "deno.codeLens.referencesAllFunctions": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Enables or disables the display of code lens information for all functions in the code.",
          "scope": "window",
          "examples": [
            true,
            false
          ]
        },
        "deno.codeLens.test": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "Enables or disables the display of code lenses that allow running of individual tests in the code.",
          "scope": "resource"
        },
        "deno.codeLens.testArgs": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [
            "--allow-all",
            "--no-check"
          ],
          "markdownDescription": "Additional arguments to use with the run test code lens.  Defaults to `[ \"--allow-all\", \"--no-check\" ]`.",
          "scope": "resource"
        },
        "deno.config": {
          "type": "string",
          "default": null,
          "markdownDescription": "The file path to a configuration file. This is the equivalent to using `--config` on the command line. The path can be either be relative to the workspace, or an absolute path.\n\nIt is recommend you name it `deno.json` or `deno.jsonc`.\n\n**Not recommended to be set globally.**",
          "scope": "window",
          "examples": [
            "./deno.jsonc",
            "/path/to/deno.jsonc",
            "C:\\path\\to\\deno.jsonc"
          ]
        },
        "deno.inlayHints.parameterNames.enabled": {
          "type": "string",
          "enum": [
            "none",
            "literals",
            "all"
          ],
          "enumDescriptions": [
            "Disable inlay hints for parameters.",
            "Display inlay hints for literal arguments.",
            "Display inlay hints for all literal and non-literal arguments."
          ],
          "default": "none",
          "markdownDescription": "Enable/disable inlay hints for parameter names.",
          "scope": "resource"
        },
        "deno.inlayHints.parameterNames.suppressWhenArgumentMatchesName": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "Do not display an inlay hint when the argument name matches the parameter.",
          "scope": "resource"
        },
        "deno.inlayHints.parameterTypes.enabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Enable/disable inlay hints for implicit parameter types.",
          "scope": "resource"
        },
        "deno.inlayHints.variableTypes.enabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Enable/disable inlay hints for implicit variable types.",
          "scope": "resource"
        },
        "deno.inlayHints.variableTypes.suppressWhenTypeMatchesName": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "Suppress type hints where the variable name matches the implicit type.",
          "scope": "resource"
        },
        "deno.inlayHints.propertyDeclarationTypes.enabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Enable/disable inlay hints for implicit property declarations.",
          "scope": "resource"
        },
        "deno.inlayHints.functionLikeReturnTypes.enabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Enable/disable inlay hints for implicit function return types.",
          "scope": "resource"
        },
        "deno.inlayHints.enumMemberValues.enabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Enable/disable inlay hints for enum values.",
          "scope": "resource"
        },
        "deno.importMap": {
          "type": "string",
          "default": null,
          "markdownDescription": "The file path to an import map. This is the equivalent to using `--import-map` on the command line.\n\n[Import maps](https://deno.land/manual@v1.6.0/linking_to_external_code/import_maps) provide a way to \"relocate\" modules based on their specifiers. The path can either be relative to the workspace, or an absolute path.\n\n**Not recommended to be set globally.**",
          "scope": "window",
          "examples": [
            "./import_map.json",
            "/path/to/import_map.json",
            "C:\\path\\to\\import_map.json"
          ]
        },
        "deno.suggest.autoImports": {
          "type": "boolean",
          "default": true,
          "scope": "window"
        },
        "deno.suggest.completeFunctionCalls": {
          "type": "boolean",
          "default": false,
          "scope": "window"
        },
        "deno.suggest.names": {
          "type": "boolean",
          "default": true,
          "scope": "window"
        },
        "deno.suggest.paths": {
          "type": "boolean",
          "default": true,
          "scope": "window"
        },
        "deno.suggest.imports.autoDiscover": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "If enabled, when new hosts/origins are encountered that support import suggestions, you will be prompted to enable or disable it.  Defaults to `true`.",
          "scope": "window"
        },
        "deno.suggest.imports.hosts": {
          "type": "object",
          "default": {
            "https://deno.land": true,
            "https://x.nest.land": true,
            "https://crux.land": true
          },
          "markdownDescription": "Controls which hosts are enabled for import suggestions.",
          "scope": "window",
          "examples": {
            "https://deno.land": true
          }
        },
        "deno.testing.args": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [
            "--allow-all",
            "--no-check"
          ],
          "markdownDescription": "Arguments to use when running tests via the Test Explorer.  Defaults to `[ \"--allow-all\" ]`.",
          "scope": "window"
        },
        "deno.testing.enable": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "Enable the testing API for the language server. When folder is Deno enabled, tests will be available in the Test Explorer view.",
          "scope": "window"
        },
        "deno.unstable": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Controls if code will be type checked with Deno's unstable APIs. This is the equivalent to using `--unstable` on the command line.\n\n**Not recommended to be enabled globally.**",
          "scope": "window",
          "examples": [
            true,
            false
          ]
        },
        "deno.internalDebug": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Determines if the internal debugging information for the Deno language server will be logged to the _Deno Language Server_ console.",
          "scope": "window",
          "examples": [
            true,
            false
          ]
        },
        "deno.lint": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "Controls if linting information will be provided by the Deno Language Server.\n\n**Not recommended to be enabled globally.**",
          "scope": "window",
          "examples": [
            true,
            false
          ]
        }
      }
    },
    "jsonValidation": [
      {
        "fileMatch": "deno-import-intellisense.json",
        "url": "https://raw.githubusercontent.com/denoland/vscode_deno/main/schemas/registry-completions.schema.json"
      },
      {
        "fileMatch": [
          "deno.json",
          "deno.jsonc"
        ],
        "url": "https://raw.githubusercontent.com/denoland/deno/main/cli/schemas/config-file.v1.json"
      },
      {
        "fileMatch": "deno.lock",
        "url": "https://raw.githubusercontent.com/denoland/vscode_deno/main/schemas/lockfile.schema.json"
      },
      {
        "fileMatch": [
          "import*map*.json",
          "importMap*.json"
        ],
        "url": "https://raw.githubusercontent.com/denoland/vscode_deno/main/schemas/import_map.schema.json"
      }
    ]
  }
}
